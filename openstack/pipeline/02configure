#!/bin/bash
# Global variables are first defined in 00setup and module
# dependencies are defined in 01import-config-defaults
#
# All overlay/bundle variables (MOD_PARAMS) defaults must go into
# the <module>/module_defaults file.

# If using any variant of dvr-snat, there is no need for a neutron-gateway.
# We also don't currently need it when using ovn
is_neutron_gateway_required ()
{
    if ! has_opt --dvr-snat* && ! has_opt --ovn; then
        return 0
    else
        return 1
    fi
}

# Needed in all cases
MOD_OVERLAYS+=(
    glance.yaml
    keystone.yaml
)

if is_neutron_gateway_required; then
    MOD_OVERLAYS+=( "neutron-gateway.yaml" )
else
    MOD_PARAMS[__NUM_NEUTRON_GATEWAY_UNITS__]=0
fi

if ! has_opt --ovn*; then
    MOD_OVERLAYS+=( "neutron-openvswitch.yaml" )
fi

# Enable this by default since it is commonly used.
if ! ( has_opt --ironic || has_opt --no-ml2dns ); then
    set -- $@ --ml2dns && cache $@
fi

if has_min_series focal; then
    # There is no Focal support for percona-cluster
    if ! has_opt --mysql-innodb-cluster*; then
        set -- $@ --mysql-innodb-cluster && cache $@
    fi
elif ! has_opt --mysql-innodb-cluster*; then
    # If not using mysql-innodb-cluster, then push the mysql overlay into the
    # stack.
    MOD_OVERLAYS+=( "mysql.yaml" )
fi

# Mandatory from T onwards and can be optionally added in R and S
if has_min_release train; then
    set -- $@ --placement && cache $@
fi

get_amphora_ssh_pub_key ()
{
    if ! [ -e $HOME/.ssh/id_amphora ]; then
        ssh-keygen -q -t rsa -f $HOME/.ssh/id_amphora -P ""
    fi
    base64 -w 0 $HOME/.ssh/id_amphora.pub
}

# Skip processing input if it includes exclusive passthrough options
! has_excl_passthrough_opt && \
while (($# > 0))
do
    case "$1" in
        --num-compute)  #__OPT__type:<int>
            MOD_PARAMS[__NUM_COMPUTE_UNITS__]=$2
            if (( $2 > 1 )); then
                MOD_PARAMS[__LOADBALANCER_TOPOLOGY__]=ACTIVE_STANDBY
            fi
            shift
            ;;
        --barbican)
            assert_min_release rocky "barbican"
            MOD_OVERLAYS+=( "barbican.yaml" )
            # always use barbican-vault for now since that is the most common
            # use-case.
            MOD_OVERLAYS+=( "barbican-vault.yaml" )
            set -- $@ --vault && cache $@
            ;;
        --barbican-ha*)
            get_units $1 __NUM_BARBICAN_UNITS__ 3
            MOD_OVERLAYS+=( "barbican-ha.yaml" )
            set -- $@ --barbican && cache $@
            ;;
        --bgp)
            conflicts_with $1 --ovn
            assert_min_release queens "dynamic routing"
            MOD_OVERLAYS+=( "neutron-bgp.yaml" )
            ;;
        --ceph)
            MOD_OVERLAYS+=( "ceph.yaml" )
            MOD_OVERLAYS+=( "openstack-ceph.yaml" )
            ;;
        --num-ceph-mons)  #__OPT__type:<int>
            MOD_PARAMS[__NUM_CEPH_MON_UNITS__]=$2
            shift
            ;;
        --num-osds-per-host)  #__OPT__type:<int>
            MOD_PARAMS[__NUM_OSDS_PER_HOST__]=$2
            shift
            ;;
        --ceph-rgw)
            if ! has_opt --ceph; then
                set -- $@ --ceph && cache $@
            fi
            MOD_OVERLAYS+=( "ceph-rgw.yaml" )
            ;;
        --ceph-rgw-ha*)
            get_units $1 __NUM_CEPH_RGW_UNITS__ 3
            MOD_OVERLAYS+=( "ceph-rgw-ha.yaml" )
            set -- $@ --ceph-rgw && cache $@
            ;;
        --ceph-rgw-multisite)
            MOD_OVERLAYS+=( "ceph.yaml" )
            MOD_OVERLAYS+=( "ceph-rgw-multisite.yaml" )
            ;;
        --ceph-proxy)
            MOD_PARAMS[__CEPH_INTERFACE__]='ceph-proxy'
            MOD_OVERLAYS+=( "ceph-proxy.yaml" )
            MOD_MSGS[ceph-proxy.0]="once ceph is ready, do 'juju config admin-key=<key> fsid=<fsid> monitor-hosts=<mon-addr-list>'"
            MOD_MSGS[ceph-proxy.1]="e.g. juju config ceph-proxy admin-key=AQALEzleKLCNDBAAxrOY8WbxF2B7lDx0TaswGA== fsid=e5e6aee2-4719-11ea-8264-fa163e50d5d1 monitor-hosts='10.5.0.11:6789 10.5.0.12:6789 10.5.0.13:6789'"
            ;;
        --ceph-ec)
            assert_min_release stein "ceph-ec"
            if ! has_opt --ceph; then
                set -- $@ --ceph && cache $@
            fi
            MOD_OVERLAYS+=( "ceph-ec-pools.yaml" )
            ;;
        --ceph-fs)
            assert_min_release ocata "ceph-mds"
            if ! has_opt --ceph; then
                set -- $@ --ceph && cache $@
            fi
            MOD_OVERLAYS+=( "ceph-fs.yaml" )
            ;;
        --ceph-fs-ha*)
            get_units $1 __NUM_CEPH_FS_UNITS__ 3
            MOD_OVERLAYS+=( "ceph-fs.yaml" )
            set -- $@ --ceph-fs && cache $@
            ;;
        --designate)
            assert_min_release ocata "designate"
            msg="REQUIRED: designate-bind upstream dns server to forward requests to:"
            get_param $1 __BIND_DNS_FORWARDER__ "$msg"
            ns=${MOD_PARAMS[__ML2_DNS_FORWARDER__]}
            MOD_MSGS[designate.0]="Your upstream dns is currently $ns. Since you have designate deployed you can now do:"
            is_neutron_gateway_required && app=neutron-gateway || app=neutron-openvswitch
            MOD_MSGS[designate.1]="juju config $app dns-servers=<designate-bind unit address>"
            if has_opt --dvr; then
                app=neutron-openvswitch
                MOD_MSGS[designate.2]="juju config $app dns-servers=<designate-bind unit address>"
            fi
            MOD_OVERLAYS+=( "memcached.yaml" )
            MOD_OVERLAYS+=( "designate.yaml" )
            ;;
        --dvr)
            conflicts_with $1 --ovn
            # since ports typically set post-deployment ensure we don't clobber on re-run
            opt=`update_from_charm_config $1 neutron-openvswitch data-port`
            MOD_OVERLAYS+=( "neutron-dvr.yaml" )
            ;;
        --dvr-l3ha*)
            conflicts_with $1 --ovn
            get_units $1 __NUM_AGENTS_PER_ROUTER__ 3
            # if we are a dep then don't get gateway units
            if ! has_opt --dvr-snat-l3ha*; then
                get_units $1 __NUM_NEUTRON_GATEWAY_UNITS__ 3
            fi
            has_opt --dvr || { set -- $@ --dvr && cache $@; }
            MOD_OVERLAYS+=( "neutron-l3ha.yaml" )
            ;;
        --dvr-snat-l3ha*)
            conflicts_with $1 --ovn
            assert_min_release queens "dvr-snat-l3ha"
            has_opt --num-compute || get_units $1 __NUM_COMPUTE_UNITS__ 3
            get_units $1 __NUM_AGENTS_PER_ROUTER__ 3
            MOD_OVERLAYS+=( "neutron-dvr-snat.yaml" )
            has_opt --dvr-snat* || \
                { set -- $@ --dvr-snat:${MOD_PARAMS[__NUM_COMPUTE_UNITS__]} && cache $@; }
            set -- $@ --dvr-l3ha:${MOD_PARAMS[__NUM_AGENTS_PER_ROUTER__]} && cache $@
            ;;
        --dvr-snat*)
            conflicts_with $1 --ovn
            assert_min_release queens "dvr-snat"
            has_opt --num-compute || get_units $1 __NUM_COMPUTE_UNITS__ 1
            has_opt --dvr || { set -- $@ --dvr && cache $@; }
            MOD_OVERLAYS+=( "neutron-dvr-snat.yaml" )
            ;;
        --lma)
            # Logging Monitoring and Alarming
            set -- $@ --graylog --grafana && cache $@
            ;;
        --graylog-channel)  #__OPT__type:<str>
            MOD_PARAMS[__GRAYLOG_SNAP_CHANNEL__]="$2"
            shift
            ;;
        --graylog)
            MOD_OVERLAYS+=( "graylog.yaml ")
            MOD_MSGS[graylog.0]="need to manually relate filebeat to any services you want to monitor"
            ;;
        --grafana-channel)  #__OPT__type:<str>
            MOD_PARAMS[__GRAFANA_SNAP_CHANNEL__]="$2"
            shift
            ;;
        --grafana)
            MOD_OVERLAYS+=( "grafana.yaml ")
            MOD_OVERLAYS+=( "prometheus-openstack.yaml ")
            if is_neutron_gateway_required; then
                MOD_OVERLAYS+=( "prometheus-openstack-neutron-gateway.yaml ")
            fi
            if has_opt --ceph; then
                MOD_OVERLAYS+=( "prometheus-ceph.yaml ")
            fi
            MOD_MSGS[grafana.0]="need to manually relate telegraf to any services you want to monitor"
            ;;
        --nagios)
            MOD_OVERLAYS+=( "nagios.yaml ")
            if has_opt --ceph; then
                MOD_OVERLAYS+=( "nagios-ceph.yaml ")
            fi
            # If using any variant of dvr-snat, there is no need to relate
            # nagios to neutron-gateway
            if is_neutron_gateway_required; then
                MOD_OVERLAYS+=( "nagios-neutron-gateway.yaml" )
            fi
            ;;
        --openstack-service-checks)
            MOD_OVERLAYS+=( "openstack-service-checks.yaml" )
            # openstack-service-checks depends on nagios+nrpe
            if ! has_opt --nagios; then
                set -- $@ --nagios && cache $@
            fi
            ;;
        --heat)
            MOD_OVERLAYS+=( "heat.yaml ")
            ;;
        --ldap)
            msg="REQUIRED: address of ldap server (leave blank to set later):"
            get_param $1 __LDAP_SERVER__ "$msg"
            MOD_OVERLAYS+=( "ldap.yaml" )
            MOD_OVERLAYS+=( "ldap-test-fixture.yaml" )
            ;;
        --neutron-fw-driver)  #__OPT__type:[openvswitch|iptables_hybrid] (default=openvswitch)
            assert_min_release newton "openvswitch driver"
            MOD_PARAMS[__NEUTRON_FW_DRIVER__]=$2
            shift
            ;;
        --l3ha*)
            conflicts_with $1 --ovn
            conflicts_with $1 --dvr-snat-l3ha*
            get_units $1 __NUM_AGENTS_PER_ROUTER__ 3
            if has_opt --dvr-snat*; then
                # autmatically convert
                set -- $@ --dvr-snat-l3ha:${MOD_PARAMS[__NUM_AGENTS_PER_ROUTER__]} && cache $@
            else
                get_units $1 __NUM_NEUTRON_GATEWAY_UNITS__ 3
                MOD_OVERLAYS+=( "neutron-l3ha.yaml" )
            fi
            ;;
        --keystone-v3)
            # useful for <= pike since queens is v3 only
            MOD_OVERLAYS+=( "keystone-v3.yaml" )
            ;;
        --keystone-saml)
            assert_min_release rocky "keystone saml"
            MOD_OVERLAYS+=( "keystone-saml.yaml" )
            if ! has_opt --openstack-dashboard*; then
                set -- $@ --openstack-dashboard && cache $@
            fi
            MOD_MSGS[keystone-saml.0]="run ./tools/enable_samltestid.sh"
            ;;
        --manila)
            assert_min_release rocky "manila"
            MOD_OVERLAYS+=( "manila.yaml" )
            MOD_OVERLAYS+=( "ceph-fs.yaml" )
            set -- $@ --ceph && cache $@
            # need to list both here in case --ovn comes after --manila on cli
            # since --ovn adds --vault as a dep.
            if has_opt --vault || has_opt --ovn; then
                MOD_OVERLAYS+=( "vault-manila.yaml" )
            fi
            ;;
        --manila-ganesha-ha*)
            get_units $1 __NUM_MANILA_GANESHA_UNITS__ 3
            MOD_OVERLAYS+=( "manila-ganesha-ha.yaml" )
            set -- $@ --manila && cache $@
            ;;
        --mysql-ha*)
            conflicts_with $1 --mysql-innodb-cluster*
            get_units $1 __NUM_MYSQL_UNITS__ 3
            MOD_OVERLAYS+=( "mysql-ha.yaml" )
            ;;
        --masakari)
            assert_min_release ussuri masakari
            # need at least 2 units of compute
            has_opt --num-compute || MOD_PARAMS[__NUM_COMPUTE_UNITS__]=2
            MOD_OVERLAYS+=( "masakari.yaml" )
            # the charm deployment guide suggests 3 units to we do the same by default here
            get_units $1 __NUM_MASAKARI_UNITS__ 3
            MOD_OVERLAYS+=( "masakari-ha.yaml" )
            ;;
        --mysql-innodb-cluster*)
            conflicts_with $1 --mysql-ha*
            assert_min_release train mysql-innodb-cluster
            # NOTE: 3 is actually the absolute minimum units required
            get_units $1 __NUM_MYSQL_UNITS__ 3
            MOD_OVERLAYS+=( "mysql-innodb-cluster.yaml")
            if has_opt --vault; then
                MOD_OVERLAYS+=( "vault-certificates-mysql-innodb-cluster.yaml" )
            fi
            # this will be auto-generated for each app (see common/render.d/all)
            MOD_OVERLAYS+=( "mysql-innodb-cluster-router.yaml" )
            MOD_PARAMS[__MYSQL_INTERFACE__]='__APPLICATION_MYSQL_INNODB_ROUTER__'
            ;;
        --no-ml2dns)  #__OPT__
            conflicts_with $1 --ml2dns
            ;;
        --ml2dns)
            conflicts_with $1 --no-ml2dns
            # this is internal dns integration, for external use --designate
            if [ -z "${MOD_PARAMS[__ML2_DNS_FORWARDER__]}" ]; then
                msg="REQUIRED: ml2-dns upstream dns server to forward requests to:"
                get_param $1 __ML2_DNS_FORWARDER__ "$msg"
            fi
            MOD_OVERLAYS+=( "neutron-ml2dns.yaml" )
            if ! has_opt --ovn; then
                if is_neutron_gateway_required; then
                    MOD_OVERLAYS+=( "neutron-ml2dns-gateway.yaml" )
                fi
                MOD_OVERLAYS+=( "neutron-ml2dns-openvswitch.yaml" )
            fi
            ;;
        --nova-cells)
            assert_min_release rocky "nova cells"
            MOD_OVERLAYS+=( "nova-cells.yaml" )
            ;;
        --nova-console*)
            MOD_OVERLAYS+=( "memcached.yaml" )
            MOD_OVERLAYS+=( "nova-console.yaml" )
            get_param $1 __CONSOLE_TYPE__ "REQUIRES: nova console access protocol:"
            ;;
        --nfs-server)
            MOD_OVERLAYS+=("nfs-server-test-fixture.yaml")
            ;;
        --octavia)
            if `has_opt --ovn`; then
                assert_min_release train "octavia+ovn"
                MOD_OVERLAYS+=( "octavia-ovn.yaml" )
            else
                assert_min_release rocky "octavia"
                MOD_OVERLAYS+=( "octavia-ovs.yaml" )
            fi
            MOD_OVERLAYS+=( "octavia.yaml" )
            if has_opt --openstack-dashboard*; then
                MOD_OVERLAYS+=( "octavia-dashboard.yaml" )
            fi
            # no amphora if using ovn provider
            if ! has_opt --octavia-ovn-provider; then
                MOD_PARAMS[__AMPHORA_SSH_PUB_KEY__]="`get_amphora_ssh_pub_key`"
                # This equates to m1.large (rather than m1.medium) which should
                # allow creating 1x ubunu vm + 1x amphora vm on the same host thus
                # avoiding the need for > 1 compute host.
                MOD_PARAMS[__NOVA_COMPUTE_UNIT_CONSTRAINTS__]="mem=8G"
                if ! has_opt --no-octavia-diskimage-retrofit; then
                    # By default we let retrofit use images uploaded by the post-deploy configure script.
                    MOD_OVERLAYS+=( "octavia-diskimage-retrofit.yaml" )
                    MOD_PARAMS[__OCTAVIA_RETROFIT_UCA__]=`get_ost_release`
                    if ! has_opt --octavia-diskimage-retrofit-glance-simplestreams; then
                       MOD_OVERLAYS+=( "octavia-diskimage-retrofit-glance.yaml" )
                    fi
                fi
                MOD_MSGS[octavia.0]="you need to to create an amphora image before you can use Octavia"
                MOD_MSGS[octavia.1]="this can be done in one of two ways:"
                MOD_MSGS[octavia.2]="run ./tools/upload_octavia_amphora_image.sh --release $release to use a pre-created image (recommended)"
                MOD_MSGS[octavia.3]="create a new image with 'juju run-action octavia-diskimage-retrofit/0 --wait retrofit-image source-image=<uuid>' with id of image in Glance to use as base"
            fi
            if has_opt --octavia-ipv4; then
                MOD_MSGS[octavia.4]="run tools/create_ipv4_octavia.sh"
            fi
            MOD_MSGS[octavia.5]="run tools/configure_octavia.sh to finish setting up octavia"
            MOD_MSGS[octavia.6]="create vm for testing e.g. ./tools/instance_launch.sh 1 focal"
            MOD_MSGS[octavia.7]="add floating ip to vm with ./tools/float_all.sh "
            MOD_MSGS[octavia.8]="install e.g. apache2 on the vm so it listens on port 80"
            MOD_MSGS[octavia.9]="create loadbalancer i.e. ./tools/create_octavia_lb.sh --member-vm <uuid from prev step>"
            MOD_MSGS[octavia.10]="alternatively manually create loadbalancer"
            MOD_MSGS[octavia.11]="openstack loadbalancer create --name lb2 --vip-network-id lb-mgmt"
            ;;
        --octavia-ovn-provider)
            MOD_OVERLAYS+=( "octavia-ovn-provider.yaml" )
            assert_min_release victoria octavia-ovn-provider
            # ensure octavia and ovn
            set -- $@ --octavia && cache $@
            set -- $@ --ovn && cache $@
            ;;
        --octavia-ha*)
            get_units $1 __NUM_OCTAVIA_UNITS__ 3
            MOD_OVERLAYS+=( "octavia-ha.yaml" )
            set -- $@ --octavia && cache $@
            ;;
        --octavia-ipv4)
            MOD_OVERLAYS+=( "octavia-ipv4.yaml" )
            set -- $@ --octavia && cache $@
            ;;
        --octavia-diskimage-retrofit-glance-simplestreams)
            conflicts_with $1 --no-octavia-diskimage-retrofit
            set -- $@ --glance-simplestreams && cache $@
            MOD_OVERLAYS+=( "octavia-diskimage-retrofit-glance-simplestreams.yaml" )
            ;;
        --overlay-network-type) #__OPT__type:[gre|vxlan|geneve]
            MOD_PARAMS[__OVERLAY_NETWORK_TYPE__]="$2"
            shift
            ;;
        --no-octavia-diskimage-retrofit)  #__OPT__
            conflicts_with $1 --octavia-diskimage-retrofit*
            ;;
        --glance-simplestreams-swift)
            MOD_PARAMS[__GSSS_SWIFT_ENABLED__]=true
            set -- $@ --glance-simplestreams --ceph-rgw && cache $@
            ;;
        --glance-simplestreams)
            MOD_OVERLAYS+=( "glance-simplestreams-sync.yaml" )
            ;;
        --rabbitmq-server-ha*)
            get_units $1 __NUM_RABBIT_UNITS__ 3
            ;;
        --rsyslog)
            MOD_OVERLAYS+=( "rsyslog.yaml" )
            ;;
        --ssl)
            (cd ssl; . ./create_ca_cert.sh $MOD_SSL_STATE_DIR;)
            ssl_results="ssl/$MOD_SSL_STATE_DIR/results"
            MOD_PARAMS[__SSL_CA__]=`base64 ${ssl_results}/cacert.pem| tr -d '\n'`
            MOD_PARAMS[__SSL_CERT__]=`base64 ${ssl_results}/servercert.pem| tr -d '\n'`
            MOD_PARAMS[__SSL_KEY__]=`base64 ${ssl_results}/serverkey.pem| tr -d '\n'`
            # Make everything HA with 1 unit (unless --ha has already been set)
            if ! has_opt '--ha*'; then
                set -- $@ --ha:1 && cache $@
            fi
            ;;
        --nova-network)
            # NOTE(hopem) yes this is a hack and we'll get rid of it when nova-network is finally no more
            export MOD_BASE_TEMPLATE=openstack-nova-network.yaml.template
            ;;
        --neutron-sg-logging)
            conflicts_with $1 --ovn
            assert_min_release queens "neutron-sg-logging"
            MOD_OVERLAYS+=( "neutron-sg-logging.yaml" )
            ;;
        --ovn)
            assert_min_release train "ovn"
            # since ports typically set post-deployment ensure we don't clobber on re-run
            opt=`update_from_charm_config $1 ovn-chassis bridge-interface-mappings`
            MOD_OVERLAYS+=( "neutron-ovn.yaml" )
            # needs to be left blank since it is configured by the neutron-api-plugin-ovn charm
            MOD_PARAMS[__OVERLAY_NETWORK_TYPE__]=""
            if ! has_opt --vault*; then
                set -- $@ --vault && cache $@
            fi
            ;;
        --placement)
            assert_min_release rocky "placement"
            MOD_OVERLAYS+=( "placement.yaml" )
            ;;
        --cinder-ha*)
            get_units $1 __NUM_CINDER_UNITS__ 3
            MOD_OVERLAYS+=( "cinder-ha.yaml" )
            ;;
        --designate-ha*)
            get_units $1 __NUM_DESIGNATE_UNITS__ 3
            MOD_OVERLAYS+=( "designate-ha.yaml" )
            set -- $@ --designate && cache $@
            ;;
        --glance-ha*)
            get_units $1 __NUM_GLANCE_UNITS__ 3
            MOD_OVERLAYS+=( "glance-ha.yaml" )
            ;;
        --heat-ha*)
            get_units $1 __NUM_HEAT_UNITS__ 3
            MOD_OVERLAYS+=( "heat.yaml ")
            MOD_OVERLAYS+=( "heat-ha.yaml ")
            set -- $@ --heat && cache $@
            ;;
        --keystone-ha*)
            get_units $1 __NUM_KEYSTONE_UNITS__ 3
            MOD_OVERLAYS+=( "keystone-ha.yaml" )
            ;;
        --neutron-api-ha*)
            get_units $1 __NUM_NEUTRON_API_UNITS__ 3
            MOD_OVERLAYS+=( "neutron-api-ha.yaml" )
            ;;
        --nova-cloud-controller-ha*)
            get_units $1 __NUM_NOVACC_UNITS__ 3
            MOD_OVERLAYS+=( "nova-cloud-controller-ha.yaml" )
            MOD_OVERLAYS+=( "memcached.yaml" )
            ;;
        --openstack-dashboard)
            MOD_OVERLAYS+=( "openstack-dashboard.yaml" )
            # Ensure that we re-run --ha if it has already run so that it
            # picks up the fact that dashboard has been added (possibly by
            # another hook as a dependency).
            ha_units=${MOD_PARAMS[__NUM_HA_UNITS__]:-null}
            if has_opt --ha && [ "$ha_units" != "null" ]; then
                set -- $@ --ha:$ha_units && cache $@
            fi
            ;;
        --openstack-dashboard-ha*)
            get_units $1 __NUM_HORIZON_UNITS__ 3
            MOD_OVERLAYS+=( "openstack-dashboard-ha.yaml" )
            set -- $@ --openstack-dashboard && cache $@
            ;;
        --placement-ha*)
            get_units $1 __NUM_NOVA_PLACEMENT_UNITS__ 3
            MOD_OVERLAYS+=( "placement-ha.yaml" )
            ;;
        --swift)
            conflicts_with $1 --ceph-rgw
            MOD_OVERLAYS+=( "swift.yaml" )
            ;;
        --swift-ha*)
            get_units $1 __NUM_SWIFT_PROXY_UNITS__ 3
            MOD_OVERLAYS+=( "swift-ha.yaml" )
            set -- $@ --swift && cache $@
            ;;
        --telemetry|--telemetry-gnocchi)
            # ceilometer + aodh + gnocchi (>= pike)
            assert_min_release pike "gnocchi"
            MOD_OVERLAYS+=( "ceph.yaml" )
            MOD_OVERLAYS+=( "gnocchi.yaml" )
            MOD_OVERLAYS+=( "memcached.yaml" )
            MOD_OVERLAYS+=( "telemetry.yaml" )

            if has_opt --vault; then
                MOD_OVERLAYS+=( "vault-openstack-certificates-gnocchi.yaml" )
                MOD_OVERLAYS+=( "vault-openstack-certificates-ceilometer.yaml" )
                MOD_OVERLAYS+=( "vault-openstack-certificates-aodh.yaml" )
            fi
            ;;
        --telemetry-legacy-aodh)
            # ceilometer + aodh + mongodb (<= pike)
            assert_max_release pike "legacy-aodh"
            MOD_OVERLAYS+=( "telemetry-legacy-aodh.yaml" )
            if has_opt --vault; then
                MOD_OVERLAYS+=( "vault-openstack-certificates-ceilometer.yaml" )
                MOD_OVERLAYS+=( "vault-openstack-certificates-aodh.yaml" )
            fi
            ;;
        --telemetry-legacy)
            # ceilometer + mongodb (<= pike)
            MOD_OVERLAYS+=( "telemetry-legacy.yaml" )
            if has_opt --vault; then
                MOD_OVERLAYS+=( "vault-openstack-certificates-ceilometer.yaml" )
            fi
            ;;
        --telemetry-ha*)
            get_units $1 __NUM_TELEMETRY_UNITS__ 3
            MOD_OVERLAYS+=( "telemetry-ha.yaml" )
            set -- $@ --telemetry && cache $@
            ;;
        --vault)
            conflicts_with $1 --ssl
            assert_min_release queens "vault"
            MOD_OVERLAYS+=( "vault.yaml" )
            MOD_OVERLAYS+=( "vault-openstack-secrets.yaml" )
            if ! has_opt --ssl; then
                MOD_OVERLAYS+=( "vault-openstack-certificates.yaml" )
                for opt in --heat --octavia --barbican --designate --placement --openstack-dashboard --ironic; do
                    has_opt $opt* && MOD_OVERLAYS+=( "vault-openstack-certificates-${opt##--}.yaml" )
                done
            fi
            has_opt --ceph && MOD_OVERLAYS+=( "vault-ceph.yaml" )
            MOD_MSGS[vault.0]="run ./tools/vault-unseal-and-authorise.sh"
            ;;
        --etcd-channel)  #__OPT__type:<str>
            MOD_PARAMS[__ETCD_SNAP_CHANNEL__]=$2
            shift
            ;;
        --ironic)
            MOD_OVERLAYS+=( "ironic.yaml" )
            MOD_OVERLAYS+=( "neutron-gateway.yaml" )
            MOD_OVERLAYS=( ${MOD_OVERLAYS[@]/"neutron-openvswitch.yaml"} )
            set -- $@ --no-ml2dns --ceph --ceph-rgw && cache $@
            MOD_MSGS[ironic-conductor.0]="juju run-action ironic-conductor/leader set-temp-url-secret"
            ;;
        --vault-ha*)
            get_units $1 __NUM_VAULT_UNITS__ 3
            get_units $1 __NUM_ETCD_UNITS__ 3
            MOD_OVERLAYS+=( "vault-ha.yaml" )
            MOD_OVERLAYS+=( "etcd.yaml" )
            MOD_OVERLAYS+=( "easyrsa.yaml" )
            MOD_OVERLAYS+=( "etcd-easyrsa.yaml" )
            MOD_OVERLAYS+=( "vault-etcd.yaml" )
            set -- $@ --vault && cache $@
            ;;
        --ha*)
            get_units $1 __NUM_HA_UNITS__ 3
            units=${MOD_PARAMS[__NUM_HA_UNITS__]}
            # This is HA for "core" service apis only.
            for svc in cinder glance keystone neutron-api nova-cloud-controller; do
                svc_ha=--${svc}-ha
                # don't override ones that have been explicity provided as HA.
                has_opt $svc_ha* && continue
                set -- $@ $svc_ha:$units && cache $@
            done
            # now check optional overlays
            for svc in openstack-dashboard swift ceph-rgw placement; do
                svc_ha=--${svc}-ha
                # don't override ones that have been explicity provided as HA and
                # ignore ones that are not even requested.
                ! has_opt --$svc || has_opt $svc_ha* && continue
                set -- $@ $svc_ha:$units && cache $@
            done
            ;;
        --cinder-lvm)
            assert_min_release queens 'cinder-lvm'
            MOD_OVERLAYS+=( "cinder-lvm.yaml" )
            ;;

        *)
            echo "ERROR: invalid input '$1'"
            _usage
            exit 1
            ;;
    esac
    shift
done

target=${series}-$release
[ -z "$pocket" ] || target=${target}-$pocket
MOD_PASSTHROUGH_OPTS+=( --release-name $target )
